import React, { useState, useEffect } from 'react';
import { Bug, Shield, AlertTriangle, CheckCircle, XCircle, Search } from 'lucide-react';
import { NetworkSecuritySimulator } from '../../services/networkSimulator';

export function VulnerabilityScanner() {
  const [simulator] = useState(() => NetworkSecuritySimulator.getInstance());
  const [vulnerabilities, setVulnerabilities] = useState(simulator.getVulnerabilities());
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setVulnerabilities(simulator.getVulnerabilities());
    }, 10000);

    return () => clearInterval(interval);
  }, [simulator]);

  const startScan = () => {
    setIsScanning(true);
    setScanProgress(0);

    const progressInterval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(progressInterval);
          setIsScanning(false);
          // Generate new vulnerabilities
          simulator.getVulnerabilities();
          setVulnerabilities(simulator.getVulnerabilities());
          return 100;
        }
        return prev + Math.random() * 10;
      });
    }, 200);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-600 bg-red-50 border-red-200';
      case 'high': return 'text-orange-600 bg-orange-50 border-orange-200';
      case 'medium': return 'text-yellow-600 bg-yellow-50 border-yellow-200';
      case 'low': return 'text-blue-600 bg-blue-50 border-blue-200';
      default: return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return <XCircle className="h-5 w-5 text-red-500" />;
      case 'high': return <AlertTriangle className="h-5 w-5 text-orange-500" />;
      case 'medium': return <AlertTriangle className="h-5 w-5 text-yellow-500" />;
      case 'low': return <CheckCircle className="h-5 w-5 text-blue-500" />;
      default: return <Shield className="h-5 w-5 text-gray-500" />;
    }
  };

  const criticalVulns = vulnerabilities.filter(v => v.severity === 'critical').length;
  const highVulns = vulnerabilities.filter(v => v.severity === 'high').length;
  const exploitableVulns = vulnerabilities.filter(v => v.exploitable).length;

  return (
    <div className="space-y-6">
      {/* Scanner Controls */}
      <div className="bg-white rounded-lg border border-gray-200 shadow-sm">
        <div className="px-6 py-4 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Bug className="h-6 w-6 text-orange-600" />
              <h3 className="text-lg font-semibold text-gray-900">Vulnerability Scanner (Nmap + NSE)</h3>
            </div>
            <button
              onClick={startScan}
              disabled={isScanning}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Search className="h-4 w-4" />
              <span>{isScanning ? 'Scanning...' : 'Start Scan'}</span>
            </button>
          </div>
        </div>

        {isScanning && (
          <div className="px-6 py-4 border-b border-gray-200">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-gray-700">Scan Progress</span>
              <span className="text-sm text-gray-500">{Math.round(scanProgress)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-300" 
                style={{ width: `${scanProgress}%` }}
              ></div>
            </div>
            <p className="text-sm text-gray-600 mt-2">
              Scanning network for vulnerabilities and security issues...
            </p>
          </div>
        )}

        <div className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-gray-900">{vulnerabilities.length}</div>
              <div className="text-sm text-gray-600">Total Vulnerabilities</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-red-600">{criticalVulns}</div>
              <div className="text-sm text-gray-600">Critical</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600">{highVulns}</div>
              <div className="text-sm text-gray-600">High Risk</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-purple-600">{exploitableVulns}</div>
              <div className="text-sm text-gray-600">Exploitable</div>
            </div>
          </div>
        </div>
      </div>

      {/* Vulnerability List */}
      <div className="bg-white rounded-lg border border-gray-200 shadow-sm">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900">Detected Vulnerabilities</h3>
        </div>
        <div className="divide-y divide-gray-200">
          {vulnerabilities.map((vuln) => (
            <div key={vuln.id} className="px-6 py-4 hover:bg-gray-50">
              <div className="flex items-start justify-between">
                <div className="flex items-start space-x-3">
                  {getSeverityIcon(vuln.severity)}
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-1">
                      <h4 className="text-sm font-medium text-gray-900">{vuln.title}</h4>
                      {vuln.exploitable && (
                        <span className="px-2 py-1 text-xs bg-red-100 text-red-800 rounded">
                          EXPLOITABLE
                        </span>
                      )}
                      {vuln.cve && (
                        <span className="px-2 py-1 text-xs bg-gray-100 text-gray-800 rounded font-mono">
                          {vuln.cve}
                        </span>
                      )}
                    </div>
                    <p className="text-sm text-gray-600 mb-2">{vuln.description}</p>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-xs text-gray-500">
                      <div>
                        <span className="font-medium">Target:</span> {vuln.target}
                      </div>
                      <div>
                        <span className="font-medium">Service:</span> {vuln.service || 'Unknown'}
                      </div>
                      <div>
                        <span className="font-medium">Port:</span> {vuln.port || 'N/A'}
                      </div>
                      <div>
                        <span className="font-medium">Risk Score:</span> {vuln.riskScore}/100
                      </div>
                    </div>

                    <div className="mt-3 p-3 bg-blue-50 rounded-md">
                      <h5 className="text-xs font-medium text-blue-900 mb-1">Recommended Solution:</h5>
                      <p className="text-xs text-blue-800">{vuln.solution}</p>
                    </div>
                  </div>
                </div>
                <div className="flex flex-col items-end space-y-2">
                  <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getSeverityColor(vuln.severity)}`}>
                    {vuln.severity.toUpperCase()}
                  </span>
                  <span className="text-xs text-gray-500">
                    {vuln.timestamp.toLocaleDateString()}
                  </span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Vulnerability Trends */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-lg border border-gray-200 shadow-sm">
          <div className="px-6 py-4 border-b border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900">Severity Distribution</h3>
          </div>
          <div className="p-6">
            <div className="space-y-4">
              {['critical', 'high', 'medium', 'low'].map((severity) => {
                const count = vulnerabilities.filter(v => v.severity === severity).length;
                const percentage = vulnerabilities.length > 0 ? (count / vulnerabilities.length) * 100 : 0;
                
                return (
                  <div key={severity} className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className={`w-4 h-4 rounded ${getSeverityColor(severity).split(' ')[1]}`}></div>
                      <span className="capitalize font-medium text-gray-900">{severity}</span>
                    </div>
                    <div className="flex items-center space-x-3">
                      <div className="w-32 bg-gray-200 rounded-full h-2">
                        <div 
                          className={`h-2 rounded-full ${getSeverityColor(severity).split(' ')[1]}`}
                          style={{ width: `${percentage}%` }}
                        ></div>
                      </div>
                      <span className="text-sm text-gray-600 w-8 text-right">{count}</span>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg border border-gray-200 shadow-sm">
          <div className="px-6 py-4 border-b border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900">Top Vulnerable Services</h3>
          </div>
          <div className="p-6">
            <div className="space-y-3">
              {Object.entries(
                vulnerabilities.reduce((acc, vuln) => {
                  const service = vuln.service || 'Unknown';
                  acc[service] = (acc[service] || 0) + 1;
                  return acc;
                }, {} as Record<string, number>)
              )
                .sort(([, a], [, b]) => b - a)
                .slice(0, 5)
                .map(([service, count]) => (
                  <div key={service} className="flex items-center justify-between">
                    <span className="font-medium text-gray-900">{service}</span>
                    <span className="px-2 py-1 bg-gray-100 text-gray-800 rounded text-sm">
                      {count} vulnerabilities
                    </span>
                  </div>
                ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}